import React, { Component } from 'react';
import Airtable from 'airtable';
import first from 'lodash/first';
import isUndefined from 'lodash/isUndefined';
import differenceInDays from 'date-fns/differenceInDays';
import parse from 'date-fns/parse';
import format from 'date-fns/format';
import { fabric } from 'fabric';
import { withStyles } from '@material-ui/core/styles';
import withRoot from './withRoot';
import Typography from '@material-ui/core/Typography';
import Modal from './components/Modal';
import {
  AIRTABLE_API_KEY, //
  AIRTABLE_BASE_NAME,
} from './config';
import { chicago } from './offices';
import './App.css';

const base = new Airtable({ apiKey: AIRTABLE_API_KEY }).base(
  AIRTABLE_BASE_NAME
);

class App extends Component {
  state = {
    showModal: false,
    fullName: '',
    email: '',
    startAt: new Date(),
    endAt: new Date(),
    selectedDesk: null,
  };

  async componentDidMount() {
    const canvasSize = await this._canvasSize(chicago);
    const bookings = await this._getBookings();

    this.canvas = new fabric.Canvas('canvas', {
      hoverCursor: 'pointer',
      selection: true,
    });

    this.canvas.setDimensions(canvasSize);

    this.canvas.on({
      'selection:created': this._onSelect,
      'selection:updated': this._onSelect,
    });

    fabric.loadSVGFromURL(chicago, (objects, options) => {
      objects.forEach(object => {
        const isDesk = this._isItDesk(object);
        let isBooked = true;

        if (isDesk) {
          isBooked = this._isItBooked(object);

          object.set({ fill: isBooked ? '#424651' : '#33cc66' });
        }

        object.hasBorders = false;
        object.hasControls = false;
        object.selectable = isDesk && !isBooked;

        this.canvas.add(object);
      });
    });
  }

  _getBookings = () => {
    const that = this;
    let items = [];

    return new Promise((resolve, reject) => {
      base('Bookings')
        .select()
        .eachPage(
          function page(records, fetchNextPage) {
            records.forEach(function({ fields }) {
              items = [...items, { ...fields }];
            });

            fetchNextPage();
          },
          function done(err) {
            if (err) {
              console.error(err);
              reject();
            }

            that.bookings = items;

            resolve(items);
          }
        );
    });
  };

  _onSelect = ({ target }) => {
    this.setState({ showModal: true, selectedDesk: target });
  };

  _canvasSize(source) {
    return new Promise((resolve, reject) => {
      const image = new Image();

      image.src = source;

      image.addEventListener('load', () => {
        resolve({ width: image.width, height: image.height });
      });

      image.addEventListener('error', () => {
        console.error('[IMAGE LOADING ERROR]');

        reject();
      });
    });
  }

  _isItDesk({ id }) {
    return !isUndefined(id) && id.includes('rec'); // 'rec' is the beggining of the ID generated by Airtable
  }

  _isItBooked({ id }) {
    const today = new Date();

    return this.bookings.some(({ startAt, endAt, desk }) => {
      const start = parse(startAt, 'yyyy-MM-dd', today);
      const end = parse(endAt, 'yyyy-MM-dd', today);

      return (
        first(desk) === id &&
        differenceInDays(today, start) >= 0 &&
        differenceInDays(end, today) >= 0
      );
    });
  }

  onCloseModal = () => {
    this.setState({ showModal: false });
  };

  onSubmitBooking = async evt => {
    evt.preventDefault();

    const { fullName, email, startAt, endAt, selectedDesk } = this.state;
    const params = {
      fullName,
      email,
      startAt: format(startAt, 'yyyy-MM-dd'),
      endAt: format(endAt, 'yyyy-MM-dd'),
      desk: [selectedDesk.id],
    };

    console.log('[PARAMS]', params);

    const output = await base('Bookings').create(params);

    this.setState({
      showModal: false,
      fullName: '',
      email: '',
      startAt: new Date(),
      endAt: new Date(),
      selectedDesk: null,
    });

    selectedDesk.set({ fill: '#424651' });
    selectedDesk.selectable = false;
    this.canvas.add(selectedDesk);

    console.log('[BOOKING OUTPUT]', output);
  };

  onChangeModal = evt => {
    const {
      target: { name, value },
    } = evt;

    this.setState({ [name]: value });
  };

  render() {
    const { classes } = this.props;
    const { showModal, fullName, email, startAt, endAt } = this.state;
    const values = { fullName, email, startAt, endAt };

    return (
      <div className="App">
        <div className="App-legend">
          <div className="App-dot App-dot-available" />
          <Typography className={classes.legend} variant="subtitle1">
            Available
          </Typography>
          <div className="App-dot App-dot-booked" />
          <Typography className={classes.legend} variant="subtitle1">
            Booked
          </Typography>
        </div>

        <canvas ref="canvas" id="canvas" />

        {showModal && (
          <Modal
            open={showModal}
            values={values}
            onClose={this.onCloseModal}
            onSubmit={this.onSubmitBooking}
            onChange={this.onChangeModal}
          />
        )}
      </div>
    );
  }
}

const styles = theme => ({
  legend: {
    marginRight: theme.spacing.unit * 2,
  },
});

export default withRoot(withStyles(styles)(App));
